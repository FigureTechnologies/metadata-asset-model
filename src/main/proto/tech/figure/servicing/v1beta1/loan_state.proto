syntax = "proto3";

package tech.figure.servicing.v1beta1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "tech/figure/util/v1beta1/document.proto";
import "tech/figure/util/v1beta1/person.proto";
import "tech/figure/util/v1beta1/types.proto";
import "validate/validate.proto";

/**
Aggregation of loan state across a structure (group) of loans
 */
message LoanStructureState {
  string             marker_address = 1; // Provenance Blockchain Address for the Marker representing this loan structure
  repeated LoanState loan_states    = 2; // Loan state data for loans included in the structure
}

/**
A submission of loan state metadata for a single loan
 */
message LoanStateSubmission {
  repeated LoanStateMetadata loan_state = 1; // Loan state metadata for the loan
}

/*
Aggregation of loan state for a single loan

A combination of static loan data that does not change throughout the life of the loan and a pointer to an object
in the object store that contains a list of loan states

Note: static data is possibly repeated elsewhere, but required here to make life easier for applications that require servicing data
 */
message ServicingData {
  tech.figure.util.v1beta1.UUID                       loan_id                = 1 [(validate.rules).message.required = true]; // Loan Identifier
  tech.figure.util.v1beta1.AssetType                  asset_type             = 2 [(validate.rules).message.required = true]; // Asset type (See docs/util.md)
  tech.figure.util.v1beta1.Borrowers                  current_borrower_info  = 3;                                            // Borrower(s), co-signers, etc
  tech.figure.util.v1beta1.Money                      original_note_amount   = 4 [(validate.rules).message.required = true]; // Total unpaid principal balance when the note is signed
  repeated tech.figure.util.v1beta1.DocumentMetadata  doc_meta               = 5;                                            // Metadata about documents related to the loan (document files stored separately)
	repeated LoanStateMetadata                          loan_state             = 10;                                           // List of pointers to the objects containing LoanState messages
}

/*
Metadata associated with a single loan state object stored in the object store
 */
message LoanStateMetadata {
  tech.figure.util.v1beta1.UUID       id              = 1 [(validate.rules).message.required = true]; // Identifier unique to this loan state object
  google.protobuf.Timestamp           effective_time  = 2;                                            // Timestamp when this state was produced
  string                              uri             = 3;                                            // URI Location where document is hosted/located
  tech.figure.util.v1beta1.Checksum   checksum        = 4;                                            // Hash or checksum of document bytes
}

/*
Loan state data (servicing data) at a point in time
 */
message LoanState {
  tech.figure.util.v1beta1.UUID       id                       = 1 [(validate.rules).message.required = true]; // Loan State Identifier
  google.protobuf.Timestamp           effective_time           = 2 [(validate.rules).timestamp.required = true, (validate.rules).timestamp.lt_now = true]; // Timestamp when this state was produced
  string                              servicer_name            = 3 [(validate.rules).string.min_len = 1];                                                  // Name of servicer for loan
  tech.figure.util.v1beta1.Money      total_unpaid_prin_bal    = 4 [(validate.rules).message.required = true];                                             // Total unpaid principal balance
  tech.figure.util.v1beta1.Money      accrued_interest         = 5 [(validate.rules).message.required = true];                                             // Total interest accrued to-date
  tech.figure.util.v1beta1.Money      daily_int_amount         = 6 [(validate.rules).message.required = true];                                             // Accrued interest amount per day
  /*
    Loan status, such as:
    IN REPAY
    1-9 DAYS DELQ
    10-29 DAYS DELQ
    30-59 DAYS DELQ
    60-89 DAYS DELQ
    90+ DAYS DELQ
    PAID_CLOSED
    PAID_OPEN
    FORBEARANCE
    TRANSFERRED
  */
  tech.figure.util.v1beta1.Status     loan_status              = 7;
  tech.figure.util.v1beta1.Money      current_p_and_i          = 8; // Currently monthly loan payment amount including principal and interest
  tech.figure.util.v1beta1.Rate       current_interest_rate    = 9; // The current interest rate used to calculate the principal and interest payment
  tech.figure.util.v1beta1.Date       int_accrual_start_date   = 10; // The date on which interest accrual began
  tech.figure.util.v1beta1.Date       int_paid_through_date    = 11; // The date through which interest is paid with the current payment. The effective date from which interest will be calculated for the application of the next payment.
  tech.figure.util.v1beta1.Date       maturity_date            = 12; // The date when a loan reaches maturity
  tech.figure.util.v1beta1.Date       next_due_date            = 13; // Date of next due payment for loan
  int32                               days_delinquent          = 14; // Number of days delinquent
  int32                               remaining_term_months    = 15; // Remaining loan term in months
  tech.figure.util.v1beta1.Rate       servicing_fee_rate       = 16; // The fee paid to the servicer, stated as a percentage of the outstanding loan balance
  tech.figure.util.v1beta1.Rate       apr                      = 17; // Annualized Percentage Rate of the loan
  bool                                autopay_flag             = 18; // If true, payments are automatically deducted from borrower's financial account
  tech.figure.util.v1beta1.Money      deferred_int_balance     = 19; // Accumulated Interest balance since forbearance_begin_date
  tech.figure.util.v1beta1.Date       delinquent_date          = 20; // If delinquent, date first payment was missed that made the loan currently delinquent
  uint32                              days_forbearance         = 21; // Days elapsed since entering Forbearance
  tech.figure.util.v1beta1.Date       forbearance_begin_date   = 22; // Date forbearance period begins
  tech.figure.util.v1beta1.Date       forbearance_end_date     = 23; // Date forbearance period ends
  tech.figure.util.v1beta1.Money      interest_paid            = 24; // Total interest paid to-date
  tech.figure.util.v1beta1.Rate       interest_rate_cap        = 25; // Interest rate cap
  tech.figure.util.v1beta1.Date       last_payment_date        = 26; // Last payment received date
  tech.figure.util.v1beta1.Money      monthly_payment_amount   = 27; // The minimum monthly payment amount that borrower needs to repay on the loan
  tech.figure.util.v1beta1.Money      principal_paid           = 28; // Sum of amount paid to principal
  tech.figure.util.v1beta1.Money      past_due_amount          = 29; // Amount past due
  tech.figure.util.v1beta1.Money      deferred_principal       = 30; // Deferred Principal balance

  LedgerEntry                         ledger_entry             = 70; // Ledger Entry effective on this date

  /*
    Additional loan state data for a user or tool-defined extension of state. Key is field name. Value is any proto Message.
    For scalar values, use <a href="https://developers.google.com/protocol-buffers/docs/reference/google.protobuf">Protobuf Well-Known Types</a>
  */
  map<string, google.protobuf.Any>    kv                       = 99;
}

message LedgerEntry {
  tech.figure.util.v1beta1.UUID   entry_uuid = 1;
  string                          ledger_entry_type = 2;
  tech.figure.util.v1beta1.Money  amount = 3;
  LedgerEntryBreakdown            breakdown = 4;
  LedgerEntryBreakdown            effective_breakdown = 5;
  google.protobuf.Timestamp       effective_time = 6;
  google.protobuf.Timestamp       posted_time = 7;
  google.protobuf.Timestamp       reversed_time = 8;
  string                          reversed_reason = 9;
}

message LedgerEntryBreakdown {
  repeated Allocation before = 1;
  repeated Allocation applied = 2;
  repeated Allocation after = 3;
}

message Allocation {
  tech.figure.util.v1beta1.UUID   allocation_uuid = 1;
  string                          allocation_type = 2;  // AllocationType or String of another type
  tech.figure.util.v1beta1.Money  amount_owed = 3;      // Balance owed - if LedgerEntry adjustment, alters owed amounts without appearing as if a payment were made (no change to applied)
  tech.figure.util.v1beta1.Money  amount_applied = 4;   // Amount paid so far - if LedgerEntry, shows portion of entry applied to a type (or requested to be applied to a type)

  enum AllocationType {
    UNKNOWN = 0;
    FEE = 1;
    FLOOD = 2;
    HAZARD = 3;
    INTEREST = 4;
    CAP_ORIGINATION_FEE = 5;
    NON_CAP_ORIGINATION_FEE = 6;
    PRINCIPAL = 7;
    PRINCIPAL_OVERPAY = 8;
    CREDIT = 9;
    RECORDING_FEE = 10;
    MORTGAGE_INSURANCE = 11;
    HOMEOWNER_TAXES = 12;
    HOA_FEE = 13;
    LATE_FEE = 14;
    INTEREST_PREPAYMENT = 15;
    ESCROW = 16;
    NSF_FEE = 17;
    DEFERRED_INTEREST = 18;
    INVESTOR_RECOVERABLE_FEES = 19;
    DEFERRED_PRINCIPAL = 20;
    BORROWER_RECOVERABLE_FEES = 21;
    RESTRICTED_ESCROW = 22;
    SUSPENSE = 23;
    LENDER_PLACED_FLOOD_INSURANCE = 24;
    LENDER_PLACED_HAZARD_INSURANCE = 25;
    REPORTED_MORT_DSI = 26;
    DEFERRED_INTEREST_V2 = 27;
    SUBORDINATION_FEE = 28;
    SERVICER_ADVANCE_PROPERTY_TAX_REPAYMENT = 29;
    SERVICER_ADVANCE_HOA_REPAYMENT = 30;
    SERVICER_ADVANCE_PROPERTY_PRESERVATION = 31;
    SERVICER_ADVANCE_DELINQUENCY_EXPENSE = 32;
    SERVICER_ADVANCE_LEGAL_EXPENSE = 33;
    ESCROW_INTEREST = 34;
  }
}